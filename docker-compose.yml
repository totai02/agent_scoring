services:
  zookeeper:
    image: bitnami/zookeeper:3.8.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: |
        bash -c "echo ruok | nc localhost 2181"
      interval: 10s
      timeout: 5s
      retries: 5
  kafka:
    image: bitnami/kafka:3.4.1
    container_name: kafka-1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka-1:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 10
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      zookeeper:
        condition: service_healthy

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: agent
      POSTGRES_PASSWORD: agentpw
      POSTGRES_DB: agent_scoring
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent -d agent_scoring || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data

  create-bucket:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      set -e; \
      until mc alias set local http://minio:9000 minio minio123; do echo 'waiting for minio...'; sleep 2; done; \
      mc mb -p local/ccas-audio-dev || true; \
      mc anonymous set download local/ccas-audio-dev/raw || true; \
      echo 'bucket ready'; \
      sleep 2"

  avaya-mock:
    build: .
    command: uvicorn avaya.main:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    volumes:
      - .:/usr/src/app

  ingestion-scheduler:
    build: .
    command: python -m app.services.ingestion_scheduler
    depends_on:
      kafka:
        condition: service_healthy
      avaya-mock:
        condition: service_started
    env_file: .env
    volumes:
      - .:/usr/src/app
    ports:
      - "9100:9100"

  metadata-enricher:
    build: .
    command: python -m app.services.metadata_enricher
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file: .env
    volumes:
      - .:/usr/src/app

  audio-downloader:
    build: .
    command: python -m app.services.audio_downloader
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_started
    env_file: .env
    volumes:
      - .:/usr/src/app
    ports:
      - "9200:9200"

  scoring-consumer:
    build: .
    command: python -m app.services.scoring_consumer
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_started
    env_file: .env
    volumes:
      - .:/usr/src/app

  dlq-consumer:
    build: .
    command: python -m app.services.dlq_consumer
    depends_on:
      kafka:
        condition: service_healthy
    env_file: .env
    volumes:
      - .:/usr/src/app

volumes:
  pgdata:
  minio_data:
  kafka_data:
